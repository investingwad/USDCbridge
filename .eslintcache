[{"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js":"1","/home/atul/Desktop/clone-folder/USDCbridge/src/index.js":"2","/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js":"3","/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js":"4","/home/atul/Desktop/clone-folder/USDCbridge/src/reportWebVitals.js":"5","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/actions/actions.js":"6","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/user.reducer.js":"7","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/eth.reducer.js":"8","/home/atul/Desktop/clone-folder/USDCbridge/src/App.js":"9","/home/atul/Desktop/clone-folder/USDCbridge/src/wallets.js":"10","/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js":"11"},{"size":8248,"mtime":1613469764094,"results":"12","hashOfConfig":"13"},{"size":415,"mtime":1613468895875,"results":"14","hashOfConfig":"13"},{"size":16266,"mtime":1613468895875,"results":"15","hashOfConfig":"13"},{"size":7282,"mtime":1613711670383,"results":"16","hashOfConfig":"13"},{"size":362,"mtime":1613468868523,"results":"17","hashOfConfig":"13"},{"size":283,"mtime":1613468895875,"results":"18","hashOfConfig":"13"},{"size":550,"mtime":1613468895875,"results":"19","hashOfConfig":"13"},{"size":400,"mtime":1613468895875,"results":"20","hashOfConfig":"13"},{"size":1272,"mtime":1613468895875,"results":"21","hashOfConfig":"13"},{"size":1584,"mtime":1613468895875,"results":"22","hashOfConfig":"13"},{"size":9684,"mtime":1613468895875,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19o9ehe",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js",["51","52","53"],"/home/atul/Desktop/clone-folder/USDCbridge/src/index.js",[],["54","55"],"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js",["56","57","58"],"import { useState, useEffect } from \"react\";\nimport Modal from \"./modal\";\nimport ConnectModal from \"./wallets\";\nimport WalletProvider from \"./walletProvider\";\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { logout } from \"./logic/actions/actions\";\nimport { Ethlogin } from \"./logic/actions/actions\";\n//@ts-ignore\nimport EosApi from \"eosjs-api\";\nimport {\n  Actions,\n  contracts,\n  Docs,\n  dspEndpoint,\n  eosEndpoint,\n  tables,\n  walletEndpoint,\n} from \"./config\";\nconst ethereum_address = require(\"ethereum-address\");\n\nconst updateSchema = Yup.object().shape({\n  newaddress: Yup.string()\n    .required(\"Enter new ethereum address\")\n    .test(\"ethereumaddress\", `Invalid ethereum address`, (address) =>\n      ethereum_address.isAddress(address)\n    ),\n});\n\nconst initialUpdate = {\n  newaddress: \"\",\n};\n\nconst options = {\n  httpEndpoint: eosEndpoint,\n};\nconst eos = EosApi(options);\n\nconst Eos = (props) => {\n  const username = useSelector((state) => state.user.username);\n  const walletConnected = useSelector((state) => state.user.walletConnected);\n  const ethwalletConnected = useSelector(\n    (state) => state.address.ethWalletConnected\n  );\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n  const [regstloading, setRegisterLoading] = useState(false);\n  const [updateloading, setUpdateLoading] = useState(false);\n  const [gasloading, setGasLoading] = useState(false);\n  const [ethloading, setEthLoading] = useState(false);\n  const [eosloading, setEosLoading] = useState(false);\n  const [regerrorMsg, setregerrorMsg] = useState(\"\");\n  const [errorMsg, seterrorMsg] = useState(\"\");\n  const [successMsg, setsuccessMsg] = useState(\"\");\n  const [errorMesg, seterrorMesg] = useState(\"\");\n  const [successMesg, setsuccessMesg] = useState(\"\");\n  const [regsuccessMsg, setregsuccessMsg] = useState(\"\");\n  const [ethaddress, setAddress] = useState(\"\");\n  const [registerfee, setRegisterFee] = useState(\"0.0000 EOS\");\n\n  const registerSchema = Yup.object().shape({\n    address: Yup.string()\n      .required(\"Enter ethereum address\")\n      .test(\"ethereumaddress\", `Invalid ethereum address`, (address) => {\n        return ethereum_address.isAddress(address);\n      }),\n  });\n\n  const initialRegister = {\n    address: ethaddress,\n  };\n\n  useEffect(() => {\n    const getfees = async () => {\n      const requests = await eos.getTableRows({\n        code: contracts.BRIDGE_CON,\n        scope: contracts.BRIDGE_CON,\n        table: tables.Configs,\n        json: \"true\",\n      });\n      if (requests.rows.length) {\n        const fee = await requests.rows[0].registrationfee;\n        setRegisterFee(fee);\n      }\n    };\n    getfees();\n  }, []);\n\n  const closeModal = () => {\n    setShow(false);\n  };\n\n  const connectToWallet = async () => {\n    if (walletConnected) {\n      try {\n        const wallet = WalletProvider.getWallet();\n        if (!!wallet) {\n          await WalletProvider.disconnectWallet();\n          dispatch(logout());\n          localStorage.clear();\n          props.toggleLogin(false);\n        }\n      } catch (e) {\n        console.log(\"something went wrong \", e);\n      }\n    } else {\n      setShow(true);\n    }\n  };\n\n  const handleRegister = async (values) => {\n    try {\n      const eosAmount = 1;\n      const wallet = WalletProvider.getWallet();\n      const { address } = values;\n      if (!walletConnected) {\n        setregerrorMsg(\"Eos wallet is not connected\");\n      } else if (!ethwalletConnected) {\n        setregerrorMsg(\"Ethereum wallet is not connected\");\n      } else if (!!wallet) {\n        setRegisterLoading(true);\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: contracts.EosTokenContract,\n                name: Actions.Transfer,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  from: wallet.auth.accountName,\n                  to: contracts.BRIDGE_CON,\n                  quantity: registerfee,\n                  memo: \"registration fees\",\n                },\n              },\n              {\n                account: contracts.BRIDGE_CON,\n                name: Actions.RegisterEth,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  account: wallet.auth.accountName,\n                  ethaddress: address,\n                },\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setRegisterLoading(false);\n          setregsuccessMsg(\"Transaction Success\");\n          setregerrorMsg(\"\");\n        }\n      } else {\n        setRegisterLoading(false);\n      }\n    } catch (e) {\n      setregerrorMsg(e.message);\n      setRegisterLoading(false);\n    } finally {\n      setRegisterLoading(false);\n    }\n  };\n\n  const handleUpdate = async (values) => {\n    try {\n      const wallet = WalletProvider.getWallet();\n      const { newaddress } = values;\n      if (!walletConnected) {\n        seterrorMsg(\"Eos wallet is not connected\");\n      } else if (!ethwalletConnected) {\n        seterrorMsg(\"Ethereum wallet is not connected\");\n      } else if (!!wallet) {\n        setUpdateLoading(true);\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: contracts.EosTokenContract,\n                name: Actions.Transfer,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  from: wallet.auth.accountName,\n                  to: contracts.BRIDGE_CON,\n                  quantity: registerfee,\n                  memo: \"modification fees\",\n                },\n              },\n              {\n                account: contracts.BRIDGE_CON,\n                name: Actions.ModifyEth,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  account: wallet.auth.accountName,\n                  newethaddress: newaddress,\n                },\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setUpdateLoading(false);\n          setsuccessMsg(\"Transaction Success\");\n          seterrorMsg(\"\");\n        }\n      } else {\n        setUpdateLoading(false);\n      }\n    } catch (e) {\n      seterrorMsg(e.message);\n      setUpdateLoading(false);\n    } finally {\n      setUpdateLoading(false);\n    }\n  };\n\n  const updateGasPrice = async () => {\n    try {\n      const wallet = WalletProvider.getWallet();\n      if (!walletConnected) {\n        seterrorMesg(\"Eos wallet is not connected\");\n      } else if (!ethwalletConnected) {\n        seterrorMesg(\"Ethereum wallet is not connected\");\n      } else if (!!wallet) {\n        setGasLoading(true);\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: contracts.BRIDGE_CON,\n                name: Actions.SetGasPrice,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {},\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setGasLoading(false);\n          setsuccessMesg(\"Transaction Success\");\n          seterrorMesg(\"\");\n        }\n      }\n    } catch (e) {\n      setGasLoading(false);\n    } finally {\n      setGasLoading(false);\n    }\n  };\n\n  const updateEthPrice = async () => {\n    try {\n      const wallet = WalletProvider.getWallet();\n      if (!walletConnected) {\n        seterrorMesg(\"Eos wallet is not connected\");\n      } else if (!ethwalletConnected) {\n        seterrorMesg(\"Ethereum wallet is not connected\");\n      } else if (!!wallet) {\n        setEthLoading(true);\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: contracts.BRIDGE_CON,\n                name: Actions.SetEthPrice,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {},\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setEthLoading(false);\n          setsuccessMesg(\"Transaction Success\");\n          seterrorMesg(\"\");\n        }\n      }\n    } catch (e) {\n      setEthLoading(false);\n    } finally {\n      setEthLoading(false);\n    }\n  };\n\n  const updateEosPrice = async () => {\n    try {\n      const wallet = WalletProvider.getWallet();\n      if (!walletConnected) {\n        seterrorMesg(\"Eos wallet is not connected\");\n      } else if (!ethwalletConnected) {\n        seterrorMesg(\"Ethereum wallet is not connected\");\n      } else if (!!wallet) {\n        setEosLoading(true);\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: contracts.BRIDGE_CON,\n                name: Actions.SetEosPrice,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {},\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setEosLoading(false);\n          setsuccessMesg(\"Transaction Success\");\n          seterrorMsg(\"\");\n        }\n      }\n    } catch (e) {\n      setEosLoading(false);\n    } finally {\n      setEosLoading(false);\n    }\n  };\n\n  const connectToMetamask = async () => {\n    try {\n      const { ethereum } = window;\n      const { chainId } = ethereum;\n\n      if (chainId === \"0x1\") {\n        if (!!ethereum) {\n          const accounts = await ethereum.request({\n            method: \"eth_requestAccounts\",\n          });\n          setAddress(accounts[0]);\n          dispatch(Ethlogin({ address: accounts[0] }));\n        }\n      } else {\n        alert(\"Please select Ethereum Main Network (Mainnet) then connect\");\n      }\n    } catch (e) {\n      console.log(\"something went wrong \", e);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"form-container\">\n        <div>1. Register Ethereum Address on EOS</div>\n        <div className=\"login\">\n          <button className=\"loginbtn\" onClick={connectToWallet}>\n            {walletConnected\n              ? `Logout From ${username}`\n              : \"Connect to Eos Wallet\"}\n          </button>\n          <button onClick={connectToMetamask}>\n            {!!ethaddress ? \"Connected\" : \"Connect to metamask\"}\n          </button>\n          <div className=\"register\">\n            <Formik\n              initialValues={initialRegister}\n              validationSchema={registerSchema}\n              onSubmit={handleRegister}\n            >\n              {({ setFieldValue }) => (\n                <Form>\n                  <div>\n                    <Field\n                      name=\"address\"\n                      placeholder=\"enter ethereum address\"\n                      onClick={() => setFieldValue(\"address\", ethaddress)}\n                    />\n                  </div>\n                  <div>\n                    <ErrorMessage name=\"address\" className=\"error\" />\n                  </div>\n                  <div>\n                    <div className=\"note\">\n                      Note:- Current registration fee {registerfee} will be\n                      deducted from your account.\n                    </div>\n                    <button\n                      type=\"submit\"\n                      className=\"sendbtn\"\n                      disabled={regstloading}\n                    >\n                      {regstloading ? \"registering\" : \"Register\"}\n                    </button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </div>\n        <a\n          href={Docs.Eosdoc}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Click here for help\n        </a>\n        {regerrorMsg ? (\n          <div className=\"error\">{regerrorMsg}</div>\n        ) : (\n          <div className=\"success\">{regsuccessMsg}</div>\n        )}\n        {show ? (\n          <Modal show={show}>\n            <ConnectModal\n              closeModal={closeModal}\n              toggleLogin={props.toggleLogin}\n            />\n          </Modal>\n        ) : null}\n      </div>\n\n      <div className=\"form-container\">\n        <div>2. Update Prices (Ethereum Gas, EOS, ETH) </div>\n        <div className=\"login\">\n          <div className=\"register\">\n            <button\n              className=\"pricebtn\"\n              disabled={gasloading}\n              onClick={updateGasPrice}\n            >\n              {gasloading ? \"updating\" : \"Update GAS Price\"}\n            </button>\n\n            <button\n              className=\"pricebtn\"\n              disabled={ethloading}\n              onClick={updateEthPrice}\n            >\n              {ethloading ? \"updating\" : \"Update ETH Price\"}\n            </button>\n\n            <button\n              className=\"pricebtn\"\n              disabled={eosloading}\n              onClick={updateEosPrice}\n            >\n              {eosloading ? \"updating\" : \"Update EOS Price\"}\n            </button>\n          </div>\n        </div>\n        {errorMesg ? (\n          <div className=\"error\">{errorMesg}</div>\n        ) : (\n          <div className=\"success\">{successMesg}</div>\n        )}\n      </div>\n\n      <div className=\"form-container\">\n        <div>3. Modify Ethereum Address on EOS</div>\n        <div className=\"login\">\n          <div className=\"register\">\n            <Formik\n              initialValues={initialUpdate}\n              validationSchema={updateSchema}\n              onSubmit={handleUpdate}\n            >\n              {({ setFieldValue }) => (\n                <Form>\n                  <div>\n                    <Field\n                      name=\"newaddress\"\n                      placeholder=\"enter new ethereum address\"\n                      onClick={() => setFieldValue(\"newaddress\", ethaddress)}\n                    />\n                  </div>\n                  <div>\n                    <ErrorMessage name=\"newaddress\" className=\"error\" />\n                  </div>\n                  <div>\n                    <div className=\"note\">\n                      Note:- Current modification fee {registerfee} will be\n                      deducted from your account.\n                    </div>\n                    <button\n                      type=\"submit\"\n                      className=\"sendbtn\"\n                      disabled={updateloading}\n                    >\n                      {updateloading ? \"updating\" : \"Update Address\"}\n                    </button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </div>\n        {errorMsg ? (\n          <div className=\"error\">{errorMsg}</div>\n        ) : (\n          <div className=\"success\">{successMsg}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Eos;\n",["59","60"],"/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js",["61","62","63","64"],"/home/atul/Desktop/clone-folder/USDCbridge/src/reportWebVitals.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/actions/actions.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/user.reducer.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/eth.reducer.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/App.js",["65"],"import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport WalletProvider from \"./walletProvider\";\nimport { login } from \"./logic/actions/actions\";\nimport Ethereum from \"./ethComponent\";\nimport Eos from \"./eosComponent\";\nimport EosTransaction from \"./eostransaction\";\n\nconst { useEffect, useState } = React;\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const toggleLogin = (logged) => {\n    setLoggedIn(logged);\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const connectWallet = async (walletType) => {\n      try {\n        await WalletProvider.login(walletType);\n        const wallet = WalletProvider.getWallet();\n\n        if (!!wallet) {\n          dispatch(login({ username: wallet?.auth?.accountName }));\n          toggleLogin(true);\n        }\n      } catch (e) {\n        console.log(\"something went wrong \", e);\n      }\n    };\n\n    const walletType = localStorage.getItem(\"walletType\");\n\n    if (!!walletType) {\n      let wallet = parseInt(walletType);\n\n      if (wallet >= 0) {\n        connectWallet(wallet);\n      }\n    }\n  }, []);\n\n  return (\n    <div>\n      <Eos toggleLogin={toggleLogin} />\n      <Ethereum />\n      <EosTransaction loggedIn={loggedIn} />\n    </div>\n  );\n}\n\nexport default App;\n",["66","67"],"/home/atul/Desktop/clone-folder/USDCbridge/src/wallets.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js",[],{"ruleId":"68","severity":1,"message":"69","line":12,"column":23,"nodeType":"70","messageId":"71","endLine":12,"endColumn":34},{"ruleId":"68","severity":1,"message":"72","line":38,"column":9,"nodeType":"70","messageId":"71","endLine":38,"endColumn":24},{"ruleId":"68","severity":1,"message":"73","line":40,"column":9,"nodeType":"70","messageId":"71","endLine":40,"endColumn":27},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"68","severity":1,"message":"78","line":16,"column":3,"nodeType":"70","messageId":"71","endLine":16,"endColumn":14},{"ruleId":"68","severity":1,"message":"79","line":19,"column":3,"nodeType":"70","messageId":"71","endLine":19,"endColumn":17},{"ruleId":"68","severity":1,"message":"80","line":114,"column":13,"nodeType":"70","messageId":"71","endLine":114,"endColumn":22},{"ruleId":"74","replacedBy":"81"},{"ruleId":"76","replacedBy":"82"},{"ruleId":"68","severity":1,"message":"83","line":34,"column":10,"nodeType":"70","messageId":"71","endLine":34,"endColumn":21},{"ruleId":"84","severity":1,"message":"85","line":51,"column":31,"nodeType":"86","messageId":"87","endLine":51,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":87,"column":50,"nodeType":"90","messageId":"91","endLine":87,"endColumn":52},{"ruleId":"92","severity":1,"message":"93","line":139,"column":6,"nodeType":"94","endLine":139,"endColumn":16,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":44,"column":6,"nodeType":"94","endLine":44,"endColumn":8,"suggestions":"97"},{"ruleId":"74","replacedBy":"98"},{"ruleId":"76","replacedBy":"99"},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'walletConnected' is assigned a value but never used.","'ethwalletConnected' is assigned a value but never used.","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"'dspEndpoint' is defined but never used.","'walletEndpoint' is defined but never used.","'eosAmount' is assigned a value but never used.",["100"],["101"],"'tokenSymbol' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'username' and 'walletConnected'. Either include them or remove the dependency array.","ArrayExpression",["102"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["103"],["100"],["101"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [loggedIn, username, walletConnected]",{"range":"108","text":"109"},"Update the dependencies array to be: [dispatch]",{"range":"110","text":"111"},[3851,3861],"[loggedIn, username, walletConnected]",[1102,1104],"[dispatch]"]