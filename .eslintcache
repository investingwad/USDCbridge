[{"/home/atul/Desktop/clone-folder/USDCbridge/src/App.js":"1","/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js":"2","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/index.js":"3","/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js":"4","/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js":"5","/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js":"6","/home/atul/Desktop/clone-folder/USDCbridge/src/index.js":"7","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/eth.reducer.js":"8","/home/atul/Desktop/clone-folder/USDCbridge/src/reportWebVitals.js":"9"},{"size":1419,"mtime":1609157382691,"results":"10","hashOfConfig":"11"},{"size":6848,"mtime":1609319723050,"results":"12","hashOfConfig":"11"},{"size":49,"mtime":1609157382695,"results":"13","hashOfConfig":"11"},{"size":10835,"mtime":1609320204384,"results":"14","hashOfConfig":"11"},{"size":7627,"mtime":1609319841507,"results":"15","hashOfConfig":"11"},{"size":1421,"mtime":1608101862170,"results":"16","hashOfConfig":"11"},{"size":627,"mtime":1609157382691,"results":"17","hashOfConfig":"11"},{"size":400,"mtime":1609312383647,"results":"18","hashOfConfig":"11"},{"size":362,"mtime":1607691129803,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1t482sy",{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/atul/Desktop/clone-folder/USDCbridge/src/App.js",["41"],"import * as React from 'react'\nimport { useDispatch } from 'react-redux'\nimport WalletProvider from \"./walletProvider\";\nimport {\n    login\n} from './logic/actions/actions'\nimport Ethereum from './ethComponent'\nimport Eos from './eosComponent'\nimport EosTransaction from './eostransaction'\n\nconst { useEffect, useState } = React\n\nfunction App() {\n    const [loggedIn, setLoggedIn] = useState(false)\n\n    const toggleLogin = (logged)=>{\n        setLoggedIn(logged)\n    }\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const connectWallet = async (walletType) => {\n\n            try {\n\n                await WalletProvider.login(walletType)\n                const wallet = WalletProvider.getWallet()\n               \n                if (!!wallet) {\n                    dispatch(login({ username: wallet?.auth?.accountName }))\n                    toggleLogin(true)\n                }\n            } catch (e) {\n                console.log('something went wrong ', e)\n            }\n        }\n\n        const walletType = localStorage.getItem(\"walletType\")\n\n        if (!!walletType) {\n            let wallet = parseInt(walletType)\n\n            if (wallet >= 0) {\n                connectWallet(wallet)\n            }\n        }\n    }, [])\n\n    return (\n       <div>\n        <Eos toggleLogin= {toggleLogin}/>\n    <Ethereum/> \n    <EosTransaction loggedIn= {loggedIn}/> \n       </div>\n    );\n}\n\nexport default App;\n",["42","43"],"/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js",["44","45","46","47","48","49"],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/index.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js",["50"],"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js",["51","52","53"],"import * as Web3 from \"web3\";\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  usdcAddress,\n  bridgeAbi,\n  bridgeAddress,\n  daiAddress,\n  tokenAbi,\n  dappBrigeAbi,\n  dappBrigeAddress,\n} from \"./abi\";\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nconst schema = Yup.object().shape({\n  value: Yup.number()\n    .required(\"Enter value of token\")\n    .test(\n      \"lowAmount\",\n      `Should be greater than 0`,\n      (val) => parseFloat(val) > 0\n    ),\n  token: Yup.string().required(\"Select a token type\"),\n});\n\nconst initialValues = {\n  value: \"\",\n  token: \"USDC\",\n};\n\nconst usdcContract = new web3.eth.Contract(tokenAbi, usdcAddress);\nconst daiContract = new web3.eth.Contract(tokenAbi, daiAddress);\nconst brigeContract = new web3.eth.Contract(bridgeAbi, bridgeAddress);\nconst dappContract = new web3.eth.Contract(dappBrigeAbi, dappBrigeAddress);\n\nconst Ethereum = () => {\n  const walletConnected = useSelector((state) => state.user.walletConnected);\n  const address = useSelector((state) => state.address.address);\n  const ethwalletConnected = useSelector(\n    (state) => state.address.ethWalletConnected\n  );\n  const [loading, setLoading] = useState(\"\");\n  const [checked, setChecked] = useState(false);\n\n  const sendToken = async (stakeAMount, tokenId) => {\n    console.log(\"inside send token\");\n\n    brigeContract.methods\n      .sendToken(stakeAMount, tokenId)\n      .send({\n        from: address,\n      })\n      .on(\"transactionHash\", (hash) => {\n        console.log(\"transactionHash  sendToken\", hash);\n      })\n      .on(\"receipt\", (receipt) => {\n        console.log(\"receipt sendToken\", receipt);\n\n        setLoading(false);\n      })\n      .on(\"confirmation\", (confirmationNumber, receipt) => {\n        console.log(\"confirmationNumber sendToken\", confirmationNumber);\n        console.log(\"receipt sendToken\", receipt);\n      })\n      .on(\"error\", (error) => {\n        console.log(\"error sendToken\", error);\n        setLoading(false);\n      });\n  };\n\n  const approveAndSendToken = async (stakeAMount, tokenId, token) => {\n    console.log(\"inside approve and send token\");\n\n    setLoading(true);\n\n    const contract = token === \"USDC\" ? usdcContract : daiContract;\n\n    let approvedAmount = \"\";\n\n    if (checked) {\n      approvedAmount =\n        token === \"USDC\"\n          ? web3.utils.toWei(\"10000000000000000\", \"mwei\")\n          : web3.utils.toWei(\"10000000000000000\", \"ether\");\n    } else {\n      approvedAmount = stakeAMount;\n    }\n\n    console.log(\"approved amount \", approvedAmount);\n\n    contract.methods\n      .approve(bridgeAddress, approvedAmount)\n      .send({\n        from: address,\n      })\n      .on(\"transactionHash\", (hash) => {\n        console.log(\"transactionHash approve \", hash);\n      })\n      .on(\"receipt\", (receipt) => {\n        console.log(\"receipt approve\", receipt);\n      })\n      .on(\"confirmation\", (confirmationNumber, receipt) => {\n        console.log(\"confirmationNumber approve\", confirmationNumber);\n        console.log(\"receipt approve\", receipt);\n      })\n      .on(\"error\", (error) => {\n        console.log(\"error approve\", error);\n        setLoading(false);\n      })\n      .then(() => {\n        brigeContract.methods\n          .sendToken(stakeAMount, tokenId)\n          .send({\n            from: address,\n          })\n          .on(\"transactionHash\", (hash) => {\n            console.log(\"transactionHash  sendToken\", hash);\n          })\n          .on(\"receipt\", (receipt) => {\n            console.log(\"receipt sendToken\", receipt);\n\n            setLoading(false);\n          })\n          .on(\"confirmation\", (confirmationNumber, receipt) => {\n            console.log(\"confirmationNumber sendToken\", confirmationNumber);\n            console.log(\"receipt sendToken\", receipt);\n          })\n          .on(\"error\", (error) => {\n            console.log(\"error sendToken\", error);\n            setLoading(false);\n          });\n      });\n  };\n\n  const handleSubmit = async (values) => {\n    console.log(\"values \", values);\n\n    if (!address) {\n      alert(\"Please connect to metamask first\");\n      return;\n    }\n\n    const { value, token } = values;\n\n    console.log(\"value \", value);\n\n    if (token === \"DAPP\") {\n      const dappAmount = (parseFloat(value) * 1e4).toString();\n      setLoading(true);\n\n      dappContract.methods\n        .sendToken(dappAmount)\n        .send({\n          from: address,\n        })\n        .on(\"transactionHash\", (hash) => {\n          console.log(\"transactionHash  sendToken\", hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(\"receipt sendToken\", receipt);\n\n          setLoading(false);\n        })\n        .on(\"confirmation\", (confirmationNumber, receipt) => {\n          console.log(\"confirmationNumber sendToken\", confirmationNumber);\n          console.log(\"receipt sendToken\", receipt);\n        })\n        .on(\"error\", (error) => {\n          console.log(\"error sendToken\", error);\n          setLoading(false);\n        });\n    } else {\n      const tokenId = token === \"USDC\" ? 0 : 1;\n\n      const contract = token === \"USDC\" ? usdcContract : daiContract;\n\n      const stakeAMount =\n        token === \"USDC\"\n          ? web3.utils.toWei(value, \"mwei\")\n          : web3.utils.toWei(value, \"ether\");\n\n      console.log(\"stakeAMount \", stakeAMount);\n\n      const approvedAmount = await contract.methods\n        .allowance(address, bridgeAddress)\n        .call();\n\n      console.log(\"approvedAmount in contract \", approvedAmount);\n\n      if (approvedAmount > stakeAMount) {\n        sendToken(stakeAMount, tokenId);\n      } else {\n        approveAndSendToken(stakeAMount, tokenId, token);\n      }\n    }\n  };\n\n  console.log(\"checked \", checked);\n\n  return (\n    <div className=\"form-container\">\n      <div>3. Send Tokens Ethereum to EOS</div>\n      <div className=\"login\">\n        {/* <button onClick={connectToMetamask}>\n          {!!address ? \"Connected\" : \"Connect to metamask\"}\n        </button> */}\n\n        <div className=\"tokenform\">\n          <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleSubmit}\n          >\n            <Form>\n              <div>\n                <Field name=\"value\" placeholder=\"enter amount\" />\n              </div>\n              <div>\n                <ErrorMessage name=\"value\" />\n              </div>\n              <div>\n                <Field as=\"select\" name=\"token\">\n                  <option value=\"USDC\">USDC</option>\n                  <option value=\"DAI\">DAI</option>\n                  <option value=\"DAPP\">DAPP</option>\n                </Field>\n              </div>\n              <div>\n                <ErrorMessage name=\"token\" />\n              </div>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={checked}\n                  onChange={() => setChecked(!checked)}\n                  disabled={loading}\n                />\n                <span>Infinite Approval</span>\n              </label>\n              <div>\n                <button type=\"submit\" className=\"submit-btn\" disabled={loading}>\n                  {loading ? \"Sending Token\" : \"Send Token\"}\n                </button>\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n\n      <a\n        href=\"https://docs.google.com/document/u/1/d/14K6_DT-pqmBsAd3tLoHD-SKhPO1WCFW7unMKTMzxKx4/edit?usp=sharing\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Click here for help\n      </a>\n    </div>\n  );\n};\n\nexport default Ethereum;\n","/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/index.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/eth.reducer.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/reportWebVitals.js",[],{"ruleId":"54","severity":1,"message":"55","line":48,"column":8,"nodeType":"56","endLine":48,"endColumn":10,"suggestions":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":33,"column":10,"nodeType":"64","messageId":"65","endLine":33,"endColumn":21},{"ruleId":"66","severity":1,"message":"67","line":48,"column":31,"nodeType":"68","messageId":"69","endLine":48,"endColumn":33},{"ruleId":"66","severity":1,"message":"67","line":82,"column":39,"nodeType":"68","messageId":"69","endLine":82,"endColumn":41},{"ruleId":"70","severity":1,"message":"71","line":83,"column":31,"nodeType":"72","messageId":"73","endLine":83,"endColumn":33},{"ruleId":"54","severity":1,"message":"74","line":112,"column":6,"nodeType":"56","endLine":112,"endColumn":16,"suggestions":"75"},{"ruleId":"70","severity":1,"message":"71","line":128,"column":18,"nodeType":"72","messageId":"73","endLine":128,"endColumn":20},{"ruleId":"62","severity":1,"message":"76","line":1,"column":20,"nodeType":"64","messageId":"65","endLine":1,"endColumn":29},{"ruleId":"62","severity":1,"message":"77","line":14,"column":23,"nodeType":"64","messageId":"65","endLine":14,"endColumn":34},{"ruleId":"62","severity":1,"message":"78","line":40,"column":9,"nodeType":"64","messageId":"65","endLine":40,"endColumn":24},{"ruleId":"62","severity":1,"message":"79","line":42,"column":9,"nodeType":"64","messageId":"65","endLine":42,"endColumn":27},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["80"],"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'tokenSymbol' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'username' and 'walletConnected'. Either include them or remove the dependency array.",["83"],"'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'walletConnected' is assigned a value but never used.","'ethwalletConnected' is assigned a value but never used.",{"desc":"84","fix":"85"},"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [dispatch]",{"range":"88","text":"89"},"Update the dependencies array to be: [loggedIn, username, walletConnected]",{"range":"90","text":"91"},[1241,1243],"[dispatch]",[3164,3174],"[loggedIn, username, walletConnected]"]