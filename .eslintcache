[{"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js":"1","/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js":"2","/home/atul/Desktop/clone-folder/USDCbridge/src/index.js":"3","/home/atul/Desktop/clone-folder/USDCbridge/src/modal.js":"4","/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js":"5","/home/atul/Desktop/clone-folder/USDCbridge/src/wallets.js":"6","/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js":"7","/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js":"8","/home/atul/Desktop/clone-folder/USDCbridge/src/App.js":"9","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/store.js":"10","/home/atul/Desktop/clone-folder/USDCbridge/src/reportWebVitals.js":"11","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/index.js":"12","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/actions/actions.js":"13"},{"size":5529,"mtime":1608204610971,"results":"14","hashOfConfig":"15"},{"size":16850,"mtime":1608101862074,"results":"16","hashOfConfig":"15"},{"size":627,"mtime":1608193407129,"results":"17","hashOfConfig":"15"},{"size":289,"mtime":1608101862170,"results":"18","hashOfConfig":"15"},{"size":1421,"mtime":1608101862170,"results":"19","hashOfConfig":"15"},{"size":1684,"mtime":1608197233791,"results":"20","hashOfConfig":"15"},{"size":6802,"mtime":1608187070717,"results":"21","hashOfConfig":"15"},{"size":6124,"mtime":1608205113363,"results":"22","hashOfConfig":"15"},{"size":1419,"mtime":1608198069539,"results":"23","hashOfConfig":"15"},{"size":219,"mtime":1608192944583,"results":"24","hashOfConfig":"15"},{"size":362,"mtime":1607691129803,"results":"25","hashOfConfig":"15"},{"size":49,"mtime":1608192934445,"results":"26","hashOfConfig":"15"},{"size":176,"mtime":1608192984385,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"156tolq",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js",["58"],"import { useState, useEffect } from \"react\";\nimport Modal from \"./modal\";\nimport ConnectModal from \"./wallets\";\nimport WalletProvider from \"./walletProvider\";\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from \"./logic/actions/actions\";\nconst ethereum_address = require(\"ethereum-address\");\n\nconst registerSchema = Yup.object().shape({\n  address: Yup.string()\n    .required(\"Enter ethereum address\")\n    .test(\"ethereumaddress\", `Invalid ethereum address`, (address) =>\n      ethereum_address.isAddress(address)\n    ),\n});\n\nconst initialRegister = {\n  address: \"\",\n};\n\nconst Eos = (props) => {\n  const username = useSelector((state) => state.user.username)\n  const walletConnected = useSelector((state) => state.user.walletConnected)\n  const dispatch = useDispatch()\n  const [show, setShow] = useState(false);\n  const [regstloading, setRegisterLoading] = useState(false);\n  const [errorMsg, seterrorMsg] = useState(\"\");\n  const [successMsg, setsuccessMsg] = useState(\"\");\n\n  const closeModal = () => {\n    setShow(false);\n  };\n\n  const connectToWallet = async () => {\n    if (walletConnected) {\n      try {\n        const wallet = WalletProvider.getWallet();\n        if (!!wallet) {\n          await WalletProvider.disconnectWallet();\n          dispatch(logout())\n          localStorage.clear();\n        }\n      } catch (e) {\n        console.log(\"something went wrong \", e);\n      }\n    } else {\n      setShow(true);\n    }\n  };\n\n  const handleRegister = async (values) => {\n    try {\n      setRegisterLoading(true);\n      const eosAmount = 1;\n      const wallet = WalletProvider.getWallet();\n      const { address } = values;\n      console.log(\"address----\", address);\n      if (!!wallet) {\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: \"eosio.token\",\n                name: \"transfer\",\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  from: wallet.auth.accountName,\n                  to: \"etheosmultok\",\n                  quantity: `${eosAmount.toFixed(4)} EOS`,\n                  memo: \"registration fees\",\n                },\n              },\n              {\n                account: \"etheosmultok\",\n                name: \"registereth\",\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  account: wallet.auth.accountName,\n                  ethaddress: address,\n                },\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setRegisterLoading(false);\n          setsuccessMsg(\"Transaction Success\");\n          seterrorMsg(\"\");\n        }\n      } else {\n        setRegisterLoading(false);\n      }\n    } catch (e) {\n      console.log(\"err----\", e);\n      seterrorMsg(\n        JSON.parse(JSON.parse(JSON.stringify(e)).json.error.details[0].message)\n          .error.details[0].message.toString()\n          .split(\":\")[1]\n      );\n      setRegisterLoading(false);\n    } finally {\n      setRegisterLoading(false);\n    }\n  };\n  return (\n    <div>\n      <div className=\"form-container\">\n        <div>1. Register Ethereum Address on EOS</div>\n        <div className=\"login\">\n          {/* <div>{username}</div> */}\n          <button className=\"loginbtn\" onClick={connectToWallet}>\n            {walletConnected\n              ? `Logout From ${username}`\n              : \"Connect to Eos Wallet\"}\n          </button>\n          <div className=\"register\">\n            <Formik\n              initialValues={initialRegister}\n              validationSchema={registerSchema}\n              onSubmit={handleRegister}\n            >\n              <Form>\n                <div>\n                  <Field name=\"address\" placeholder=\"enter ethereum address\" />\n                </div>\n                <div>\n                  <ErrorMessage name=\"address\" className=\"error\" />\n                </div>\n                <div>\n                  <div className=\"note\">\n                    Note:- 1 EOS will be charged for registration fees.\n                  </div>\n                  <button\n                    type=\"submit\"\n                    className=\"sendbtn\"\n                    disabled={regstloading}\n                  >\n                    {regstloading ? \"registering\" : \"Register\"}\n                  </button>\n                </div>\n              </Form>\n            </Formik>\n          </div>\n        </div>\n        <a\n          href=\"https://docs.google.com/document/d/1peh47G369IqMjHkA3FptsODB5kRNN0DBSc17GNvzX1Q/edit?usp=sharing\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Click here for help\n        </a>\n        {errorMsg ? (\n          <div className=\"error\">{errorMsg}</div>\n        ) : (\n          <div className=\"success\">{successMsg}</div>\n        )}\n        {show ? (\n          <Modal show={show}>\n            <ConnectModal closeModal={closeModal}  toggleLogin ={props.toggleLogin}/> \n          </Modal>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Eos;\n","/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/index.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/modal.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/wallets.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js",[],["59","60"],"/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js",["61","62","63","64"],"import { useState, useEffect } from \"react\";\nimport WalletProvider from \"./walletProvider\";\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\nimport { useSelector } from 'react-redux'\nimport * as Yup from \"yup\";\n//@ts-ignore\nimport EosApi from \"eosjs-api\";\n\nconst options = {\n  httpEndpoint: \"https://api.kylin.alohaeos.com\",\n};\nconst eos = EosApi(options);\n\nconst schema = Yup.object().shape({\n  value: Yup.number()\n    .required(\"Enter value of token\")\n    .test(\"lowAmount\", `Should be greater than 0`, (val) => parseInt(val) > 0),\n  token: Yup.string().required(\"Select a token type\"),\n});\n\nconst initialValues = {\n  value: \"\",\n  token: \"6,EUSDC\",\n};\n\n\nconst EosTransaction = (props) => {\n  const username = useSelector((state) => state.user.username)\n  const walletConnected = useSelector((state) => state.user.walletConnected)\n  const [balances, setUserBalances] = useState([]);\n  const [tokenSymbol, setSymbols] = useState([\"6,EUSDC\"]);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, seterrorMsg] = useState(\"\");\n  const [successMsg, setsuccessMsg] = useState(\"\");\n\n  const {loggedIn} = props;\n  const getTokens = async () => {\n    let tokens = [];\n    const requests = await eos.getTableRows({\n      code: \"etheosmultok\",\n      scope: \"etheosmultok\",\n      table: \"acceptedsym1\",\n      json: \"true\",\n    });\n    if (requests.rows.length) {\n      requests.rows.map((row) => {\n        tokens.push(row.dtoken.toString());\n      });\n    }\n    console.log(\"tokesn----\", tokens);\n    setSymbols(tokens);\n    return tokens;\n  };\n \n  const getBalance = async (tokens, account) => {\n    try {\n      if (tokens.length) {\n        const userbal = [];\n        console.log(\"username----\", account);\n        for (const symbol of tokens) {\n          const tokensData = {\n            code: \"etheosmultok\",\n            json: true,\n            limit: 1000,\n            scope: symbol.split(\",\")[1],\n            table: \"available\",\n            table_key: account,\n          };\n          const responses = await fetch(\n            \"https://api.kylin.alohaeos.com/v1/chain/get_table_rows\",\n            {\n              method: \"post\",\n              body: JSON.stringify(tokensData),\n            }\n          );\n\n          const tokensdata = await responses.json();\n          console.log(\"respose----\", tokensdata);\n          if (tokensdata.rows.length) {\n            tokensdata.rows.map((row) => {\n              if (row.account == account) {\n                userbal.push(tokensdata.rows[0].balance);\n              }\n            });\n          }\n        }\n        console.log(\"userbalance ---\", userbal);\n        setUserBalances(userbal);\n      }\n    } catch (e) {\n      console.log(\"errr---\", e);\n    }\n  };\n\n  useEffect(()=>{\n    const getbal = async()=>{\n      const tokens = await getTokens();\n      if(walletConnected && tokens.length){\n        await getBalance(tokens, username);\n      }\n    }\n    if(loggedIn){\n     getbal()\n    }\n  }, [loggedIn])\n\n  const handleTransfer = async (values) => {\n    try {\n      setLoading(true);\n      const { value, token } = values;\n      const wallet = WalletProvider.getWallet();\n      if (!!wallet) {\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: \"ddadlptoken1\",\n                name: \"transfer\",\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  from: wallet.auth.accountName,\n                  to: \"etheosmultok\",\n                  quantity: `${parseInt(value).toFixed(\n                    parseInt(token.split(\",\")[0])\n                  )} ${token.split(\",\")[1]} `,\n                  memo: `Transfer ${token.split(\",\")[1]} token`,\n                },\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setLoading(false);\n          setsuccessMsg(\"Transaction Success\");\n          seterrorMsg(\"\");\n        }\n      } else {\n        setLoading(false);\n      }\n    } catch (e) {\n      console.log(\"error in treansferinng----\", JSON.parse(JSON.stringify(e)));\n      seterrorMsg(e.message);\n      setLoading(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div>3. Send Tokens EOS to Ethereum</div>\n      <div className=\"login\">\n        <div className=\"register\">\n          <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleTransfer}\n          >\n            <Form>\n              {balances.map((balance) => (\n                <div className=\"userbalance\">{balance}</div>\n              ))}\n              <div>\n                <Field name=\"value\" placeholder=\"enter amount\" />\n              </div>\n              <div>\n                <ErrorMessage name=\"value\" className=\"error\" />\n              </div>\n              <div>\n                <Field as=\"select\" name=\"token\">\n                  {tokenSymbol.map((sym) => (\n                    <option name=\"token\" value={sym}>\n                      {sym.split(\",\")[1]}\n                    </option>\n                  ))}\n                  {/* <option value=\"USDC\">USDC</option> */}\n                </Field>\n              </div>\n              <div>\n                <ErrorMessage name=\"token\" className=\"error\" />\n              </div>\n              <div>\n                <button\n                  type=\"submit\"\n                  className=\"registerbtn\"\n                  disabled={loading}\n                >\n                  {loading ? \"Sending Token\" : \"Send Token\"}\n                </button>\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n      {errorMsg ? (\n        <div className=\"error\">{errorMsg}</div>\n      ) : (\n        <div className=\"success\">{successMsg}</div>\n      )}\n    </div>\n  );\n};\n\nexport default EosTransaction;\n","/home/atul/Desktop/clone-folder/USDCbridge/src/App.js",["65"],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/store.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/reportWebVitals.js",[],["66","67"],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/index.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/actions/actions.js",[],{"ruleId":"68","severity":1,"message":"69","line":1,"column":20,"nodeType":"70","messageId":"71","endLine":1,"endColumn":29},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":46,"column":31,"nodeType":"78","messageId":"79","endLine":46,"endColumn":33},{"ruleId":"76","severity":1,"message":"77","line":80,"column":39,"nodeType":"78","messageId":"79","endLine":80,"endColumn":41},{"ruleId":"80","severity":1,"message":"81","line":81,"column":31,"nodeType":"82","messageId":"83","endLine":81,"endColumn":33},{"ruleId":"84","severity":1,"message":"85","line":105,"column":6,"nodeType":"86","endLine":105,"endColumn":16,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":48,"column":8,"nodeType":"86","endLine":48,"endColumn":10,"suggestions":"89"},{"ruleId":"72","replacedBy":"90"},{"ruleId":"74","replacedBy":"91"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["92"],"no-negated-in-lhs",["93"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'username' and 'walletConnected'. Either include them or remove the dependency array.","ArrayExpression",["94"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["95"],["92"],["93"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [loggedIn, username, walletConnected]",{"range":"100","text":"101"},"Update the dependencies array to be: [dispatch]",{"range":"102","text":"103"},[2955,2965],"[loggedIn, username, walletConnected]",[1241,1243],"[dispatch]"]