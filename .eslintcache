[{"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js":"1","/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js":"2","/home/atul/Desktop/clone-folder/USDCbridge/src/config.js":"3","/home/atul/Desktop/clone-folder/USDCbridge/src/App.js":"4","/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js":"5","/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js":"6","/home/atul/Desktop/clone-folder/USDCbridge/src/wallets.js":"7"},{"size":19218,"mtime":1615816187206,"results":"8","hashOfConfig":"9"},{"size":1393,"mtime":1615806097809,"results":"10","hashOfConfig":"9"},{"size":1166,"mtime":1615816564449,"results":"11","hashOfConfig":"9"},{"size":1272,"mtime":1613468895875,"results":"12","hashOfConfig":"9"},{"size":8248,"mtime":1613469764094,"results":"13","hashOfConfig":"9"},{"size":7282,"mtime":1613711670383,"results":"14","hashOfConfig":"9"},{"size":1584,"mtime":1613468895875,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19o9ehe",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js",["33","34","35","36","37"],"/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/config.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/App.js",["38"],"import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport WalletProvider from \"./walletProvider\";\nimport { login } from \"./logic/actions/actions\";\nimport Ethereum from \"./ethComponent\";\nimport Eos from \"./eosComponent\";\nimport EosTransaction from \"./eostransaction\";\n\nconst { useEffect, useState } = React;\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const toggleLogin = (logged) => {\n    setLoggedIn(logged);\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const connectWallet = async (walletType) => {\n      try {\n        await WalletProvider.login(walletType);\n        const wallet = WalletProvider.getWallet();\n\n        if (!!wallet) {\n          dispatch(login({ username: wallet?.auth?.accountName }));\n          toggleLogin(true);\n        }\n      } catch (e) {\n        console.log(\"something went wrong \", e);\n      }\n    };\n\n    const walletType = localStorage.getItem(\"walletType\");\n\n    if (!!walletType) {\n      let wallet = parseInt(walletType);\n\n      if (wallet >= 0) {\n        connectWallet(wallet);\n      }\n    }\n  }, []);\n\n  return (\n    <div>\n      <Eos toggleLogin={toggleLogin} />\n      <Ethereum />\n      <EosTransaction loggedIn={loggedIn} />\n    </div>\n  );\n}\n\nexport default App;\n","/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js",["39","40","41"],"/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js",["42","43","44","45"],"import { useState, useEffect } from \"react\";\nimport WalletProvider from \"./walletProvider\";\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\n//@ts-ignore\nimport EosApi from \"eosjs-api\";\nimport { Actions, contracts, eosEndpoint, tables } from \"./config\";\n\nconst options = {\n  httpEndpoint: eosEndpoint,\n};\nconst eos = EosApi(options);\n\nconst schema = Yup.object().shape({\n  value: Yup.number()\n    .required(\"Enter value of token\")\n    .test(\"lowAmount\", `Should be greater than 0`, (val) => parseFloat(val) > 0),\n  token: Yup.string().required(\"Select a token type\"),\n});\n\nconst initialValues = {\n  value: \"\",\n  token: \"6,USDC\",\n};\n\nconst EosTransaction = (props) => {\n  const username = useSelector((state) => state.user.username);\n  const walletConnected = useSelector((state) => state.user.walletConnected);\n  const ethwalletConnected = useSelector(\n    (state) => state.address.ethWalletConnected\n  );\n  const [balances, setUserBalances] = useState([]);\n  const [tokenSymbol, setSymbols] = useState([\"4,USDC\"]);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, seterrorMsg] = useState(\"\");\n  const [successMsg, setsuccessMsg] = useState(\"\");\n  const [usdcfee, setUsdcFee] = useState(\"0.000000 USDC\");\n  const [daifee, setDaiFee] = useState(\"0.000000 DAI\");\n\n  const { loggedIn } = props;\n  const getTokens = async () => {\n    let tokens = [];\n    const requests = await eos.getTableRows({\n      code: contracts.BRIDGE_CON,\n      scope: contracts.BRIDGE_CON,\n      table: tables.Symbols,\n      json: \"true\",\n    });\n    if (requests.rows.length) {\n      requests.rows.map((row) => {\n        tokens.push(row.dtoken.toString());\n      });\n    }\n    setSymbols(tokens);\n    return tokens;\n  };\n\n  const getBalance = async (tokens, account) => {\n    const userbal = [];\n    try {\n      if (tokens.length) {\n        for (const symbol of tokens) {\n          let code;\n          // let toAcc;\n          code = contracts.TokenContract;\n          const tokensData = {\n            code: code,\n            json: true,\n            limit: 1000,\n            scope: account,\n            table: tables.Accounts,\n            table_key: account,\n          };\n          const responses = await fetch(\n            `${eosEndpoint}/v1/chain/get_table_rows`,\n            {\n              method: \"post\",\n              body: JSON.stringify(tokensData),\n            }\n          );\n\n          const tokensdata = await responses.json();\n\n          if (tokensdata.rows.length) {\n            const balanceRow = tokensdata.rows.find(\n              (row) => row.balance.split(\" \")[1] == symbol.split(\",\")[1]\n            );\n            userbal.push(balanceRow.balance);\n          }\n        }\n        setUserBalances(userbal);\n      }\n    } catch (e) {\n      setUserBalances(userbal);\n    }\n  };\n\n  useEffect(() => {\n    const getfees = async () => {\n      const usdcreq = await eos.getTableRows({\n        code: contracts.BRIDGE_CON,\n        scope: \"USDC\",\n        table: tables.FEE_TAB,\n        json: \"true\",\n      });\n      const daireq = await eos.getTableRows({\n        code: contracts.BRIDGE_CON,\n        scope: \"DAI\",\n        table: tables.FEE_TAB,\n        json: \"true\",\n      });\n      if (usdcreq.rows.length) {\n        const fee = await usdcreq.rows[0].minfeewithdraw;\n        setUsdcFee(fee);\n      }\n      if (daireq.rows.length) {\n        const fee = await daireq.rows[0].minfeewithdraw;\n        setDaiFee(fee);\n      }\n    };\n    getfees();\n  }, []);\n\n  useEffect(() => {\n    getTokens();\n    const getbal = async () => {\n      const tokens = await getTokens();\n      if (walletConnected && tokens.length) {\n        await getBalance(tokens, username);\n      }\n    };\n    if (loggedIn) {\n      getbal();\n    }\n    if (!loggedIn) {\n      setUserBalances([]);\n    }\n  }, [loggedIn]);\n\n  const handleTransfer = async (values) => {\n    try {\n      const { value, token } = values;\n      console.log('value', value , 'token', token)\n      const wallet = WalletProvider.getWallet();\n      if (!walletConnected) {\n        seterrorMsg(\"Eos wallet is not connected\");\n      } else if (!ethwalletConnected) {\n        seterrorMsg(\"Ethereum wallet is not connected\");\n      } else if (!!wallet) {\n        setLoading(true);\n        let account;\n        let toAcc;\n        account = contracts.TokenContract;\n        toAcc = contracts.BRIDGE_CON;\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: account,\n                name: Actions.Transfer,\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  from: wallet.auth.accountName,\n                  to: toAcc,\n                  quantity: `${parseFloat(value).toFixed(\n                    parseFloat(token.split(\",\")[0])\n                  )} ${token.split(\",\")[1]} `,\n                  memo: `Transfer ${token.split(\",\")[1]} token`,\n                },\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setLoading(false);\n          setsuccessMsg(\"Transaction Success\");\n          seterrorMsg(\"\");\n        }\n      } else {\n        setLoading(false);\n      }\n    } catch (e) {\n      seterrorMsg(e.message);\n      setLoading(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div>5. Send Tokens EOS to Ethereum</div>\n      <div className=\"login\">\n        <div className=\"register\">\n          <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleTransfer}\n          >\n            <Form>\n              {balances.map((balance) => (\n                <div className=\"userbalance\">{balance}</div>\n              ))}\n              <div>\n                <Field name=\"value\" placeholder=\"enter amount\" />\n              </div>\n              <div>\n                <ErrorMessage name=\"value\" className=\"error\" />\n              </div>\n              <div>\n                <Field as=\"select\" name=\"token\">\n                  <option value=\"6,USDC\">USDC</option>\n                  <option value=\"6,DAI\">DAI</option>\n                </Field>\n              </div>\n              <div>\n                <ErrorMessage name=\"token\" className=\"error\" />\n              </div>\n              <div className=\"notefee\">\n                Note: Current withdraw fee is {usdcfee} and {daifee} set\n              </div>\n              <div>\n                <button\n                  type=\"submit\"\n                  className=\"registerbtn\"\n                  disabled={loading}\n                >\n                  {loading ? \"Sending Token\" : \"Send Token\"}\n                </button>\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n      {errorMsg ? (\n        <div className=\"error\">{errorMsg}</div>\n      ) : (\n        <div className=\"success\">{successMsg}</div>\n      )}\n    </div>\n  );\n};\n\nexport default EosTransaction;\n",["46","47"],"/home/atul/Desktop/clone-folder/USDCbridge/src/wallets.js",[],{"ruleId":"48","severity":1,"message":"49","line":11,"column":10,"nodeType":"50","messageId":"51","endLine":11,"endColumn":21},{"ruleId":"48","severity":1,"message":"52","line":11,"column":23,"nodeType":"50","messageId":"51","endLine":11,"endColumn":34},{"ruleId":"48","severity":1,"message":"53","line":20,"column":3,"nodeType":"50","messageId":"51","endLine":20,"endColumn":14},{"ruleId":"48","severity":1,"message":"54","line":23,"column":3,"nodeType":"50","messageId":"51","endLine":23,"endColumn":17},{"ruleId":"48","severity":1,"message":"55","line":120,"column":13,"nodeType":"50","messageId":"51","endLine":120,"endColumn":22},{"ruleId":"56","severity":1,"message":"57","line":44,"column":6,"nodeType":"58","endLine":44,"endColumn":8,"suggestions":"59"},{"ruleId":"48","severity":1,"message":"60","line":12,"column":23,"nodeType":"50","messageId":"51","endLine":12,"endColumn":34},{"ruleId":"48","severity":1,"message":"61","line":38,"column":9,"nodeType":"50","messageId":"51","endLine":38,"endColumn":24},{"ruleId":"48","severity":1,"message":"62","line":40,"column":9,"nodeType":"50","messageId":"51","endLine":40,"endColumn":27},{"ruleId":"48","severity":1,"message":"63","line":34,"column":10,"nodeType":"50","messageId":"51","endLine":34,"endColumn":21},{"ruleId":"64","severity":1,"message":"65","line":51,"column":31,"nodeType":"66","messageId":"67","endLine":51,"endColumn":33},{"ruleId":"68","severity":1,"message":"69","line":87,"column":50,"nodeType":"70","messageId":"71","endLine":87,"endColumn":52},{"ruleId":"56","severity":1,"message":"72","line":139,"column":6,"nodeType":"58","endLine":139,"endColumn":16,"suggestions":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},"no-unused-vars","'TextDecoder' is defined but never used.","Identifier","unusedVar","'TextEncoder' is defined but never used.","'dspEndpoint' is defined but never used.","'walletEndpoint' is defined but never used.","'eosAmount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["78"],"'useDispatch' is defined but never used.","'walletConnected' is assigned a value but never used.","'ethwalletConnected' is assigned a value but never used.","'tokenSymbol' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'username' and 'walletConnected'. Either include them or remove the dependency array.",["79"],"no-native-reassign",["80"],"no-negated-in-lhs",["81"],{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [dispatch]",{"range":"86","text":"87"},"Update the dependencies array to be: [loggedIn, username, walletConnected]",{"range":"88","text":"89"},[1102,1104],"[dispatch]",[3851,3861],"[loggedIn, username, walletConnected]"]