[{"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js":"1","/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js":"2","/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js":"3","/home/atul/Desktop/clone-folder/USDCbridge/src/index.js":"4","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/user.reducer.js":"5","/home/atul/Desktop/clone-folder/USDCbridge/src/config.js":"6","/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js":"7","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/index.js":"8","/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js":"9","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/actions/actions.js":"10","/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/eth.reducer.js":"11"},{"size":6805,"mtime":1611737515562,"results":"12","hashOfConfig":"13"},{"size":8100,"mtime":1611737108951,"results":"14","hashOfConfig":"13"},{"size":23380,"mtime":1611731558667,"results":"15","hashOfConfig":"13"},{"size":627,"mtime":1609157382691,"results":"16","hashOfConfig":"13"},{"size":763,"mtime":1611558708452,"results":"17","hashOfConfig":"13"},{"size":327,"mtime":1611733791158,"results":"18","hashOfConfig":"13"},{"size":11450,"mtime":1611737419793,"results":"19","hashOfConfig":"13"},{"size":49,"mtime":1609157382695,"results":"20","hashOfConfig":"13"},{"size":1421,"mtime":1611732416284,"results":"21","hashOfConfig":"13"},{"size":283,"mtime":1609311490515,"results":"22","hashOfConfig":"13"},{"size":400,"mtime":1609312383647,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19o9ehe",{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js",["48","49","50"],"/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js",["51","52","53","54","55"],"import { useState, useEffect } from \"react\";\nimport WalletProvider from \"./walletProvider\";\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\n//@ts-ignore\nimport EosApi from \"eosjs-api\";\nimport { contracts, eosEndpoint, tables } from \"./config\";\n\nconst options = {\n  httpEndpoint: eosEndpoint,\n};\nconst eos = EosApi(options);\n\nconst schema = Yup.object().shape({\n  value: Yup.number()\n    .required(\"Enter value of token\")\n    .test(\"lowAmount\", `Should be greater than 0`, (val) => parseInt(val) > 0),\n  token: Yup.string().required(\"Select a token type\"),\n});\n\nconst initialValues = {\n  value: \"\",\n  token: \"6,EUSDC\",\n};\n\nconst EosTransaction = (props) => {\n  const username = useSelector((state) => state.user.username);\n  const walletConnected = useSelector((state) => state.user.walletConnected);\n  const ethwalletConnected = useSelector(\n    (state) => state.address.ethWalletConnected\n  );\n  const [balances, setUserBalances] = useState([]);\n  const [tokenSymbol, setSymbols] = useState([\"6,EUSDC\"]);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, seterrorMsg] = useState(\"\");\n  const [successMsg, setsuccessMsg] = useState(\"\");\n  const [usdcfee, setUsdcFee] = useState(\"0.0000 USDC\");\n  const [daifee, setDaiFee] = useState(\"0.0000 DAI\");\n\n  const { loggedIn } = props;\n  const getTokens = async () => {\n    let tokens = [];\n    const requests = await eos.getTableRows({\n      code: contracts.BRIDGE_CON,\n      scope: contracts.BRIDGE_CON,\n      table: tables.Symbols,\n      json: \"true\",\n    });\n    if (requests.rows.length) {\n      requests.rows.map((row) => {\n        tokens.push(row.dtoken.toString());\n      });\n    }\n    console.log(\"tokesn----\", tokens);\n    setSymbols(tokens);\n    return tokens;\n  };\n\n  const getBalance = async (tokens, account) => {\n    const userbal = [];\n    try {\n      if (tokens.length) {\n        console.log(\"username----\", account);\n        for (const symbol of tokens) {\n          let code;\n          let toAcc;\n          // if (symbol == \"4,DAPP\") {\n          //   code = \"dappservices\";\n          // } else {\n          code = contracts.TokenContract;\n          // }\n          const tokensData = {\n            code: code,\n            json: true,\n            limit: 1000,\n            scope: account,\n            table: tables.Accounts,\n            table_key: account,\n          };\n          console.log(\"tokensData----\", tokensData);\n          const responses = await fetch(\n            \"https://api.main.alohaeos.com/v1/chain/get_table_rows\",\n            {\n              method: \"post\",\n              body: JSON.stringify(tokensData),\n            }\n          );\n\n          const tokensdata = await responses.json();\n          console.log(\"respose----\", tokensdata);\n          if (tokensdata.rows.length) {\n            const balanceRow = tokensdata.rows.find(\n              (row) => row.balance.split(\" \")[1] == symbol.split(\",\")[1]\n            );\n            userbal.push(balanceRow.balance);\n          }\n        }\n        console.log(\"userbalance ---\", userbal);\n        setUserBalances(userbal);\n      }\n    } catch (e) {\n      console.log(\"errr---\", e);\n      setUserBalances(userbal);\n    }\n  };\n\n  useEffect(() => {\n    const getfees = async () => {\n      const usdcreq = await eos.getTableRows({\n        code: contracts.BRIDGE_CON,\n        scope: \"USDC\",\n        table: tables.FEE_TAB,\n        json: \"true\",\n      });\n      const daireq = await eos.getTableRows({\n        code: contracts.BRIDGE_CON,\n        scope: \"DAI\",\n        table: tables.FEE_TAB,\n        json: \"true\",\n      });\n      if (usdcreq.rows.length) {\n        const fee = await usdcreq.rows[0].minfeewithdraw;\n        setUsdcFee(fee);\n      }\n      if (daireq.rows.length) {\n        const fee = await daireq.rows[0].minfeewithdraw;\n        setDaiFee(fee);\n      }\n    };\n    getfees();\n  }, []);\n\n  useEffect(() => {\n    getTokens();\n    const getbal = async () => {\n      const tokens = await getTokens();\n      if (walletConnected && tokens.length) {\n        await getBalance(tokens, username);\n      }\n    };\n    if (loggedIn) {\n      getbal();\n    }\n    if (!loggedIn) {\n      setUserBalances([]);\n    }\n  }, [loggedIn]);\n\n  const handleTransfer = async (values) => {\n    try {\n      const { value, token } = values;\n      const wallet = WalletProvider.getWallet();\n      if (!walletConnected) {\n        seterrorMsg(\"Eos wallet is not connected\");\n      } else if (!ethwalletConnected) {\n        seterrorMsg(\"Ethereum wallet is not connected\");\n      } else if (!!wallet) {\n        setLoading(true);\n        let account;\n        let toAcc;\n        // if (token == \"4,DAPP\") {\n        //   account = \"dappservices\";\n        //   toAcc = contracts.EthContract;\n        // } else {\n        account = contracts.TokenContract;\n        toAcc = contracts.BRIDGE_CON;\n        // }\n        const result = await wallet.eosApi.transact(\n          {\n            actions: [\n              {\n                account: account,\n                name: \"transfer\",\n                authorization: [\n                  {\n                    actor: wallet.auth.accountName,\n                    permission: wallet.auth.permission,\n                  },\n                ],\n                data: {\n                  from: wallet.auth.accountName,\n                  to: toAcc,\n                  quantity: `${parseInt(value).toFixed(\n                    parseInt(token.split(\",\")[0])\n                  )} ${token.split(\",\")[1]} `,\n                  memo: `Transfer ${token.split(\",\")[1]} token`,\n                },\n              },\n            ],\n          },\n          {\n            broadcast: true,\n            blocksBehind: 3,\n            expireSeconds: 60,\n          }\n        );\n        if (result) {\n          setLoading(false);\n          setsuccessMsg(\"Transaction Success\");\n          seterrorMsg(\"\");\n        }\n      } else {\n        setLoading(false);\n      }\n    } catch (e) {\n      console.log(\"error in treansferinng----\", JSON.parse(JSON.stringify(e)));\n      seterrorMsg(e.message);\n      setLoading(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div>4. Send Tokens EOS to Ethereum</div>\n      <div className=\"login\">\n        <div className=\"register\">\n          <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleTransfer}\n          >\n            <Form>\n              {balances.map((balance) => (\n                <div className=\"userbalance\">{balance}</div>\n              ))}\n              <div>\n                <Field name=\"value\" placeholder=\"enter amount\" />\n              </div>\n              <div>\n                <ErrorMessage name=\"value\" className=\"error\" />\n              </div>\n              <div>\n                <Field as=\"select\" name=\"token\">\n                  {/* {tokenSymbol.map((sym) => (\n                    <option name=\"token\" value={sym}>\n                      {sym.split(\",\")[1]}\n                    </option>\n                  ))} */}\n                  <option value=\"6,USDC\">USDC</option>\n                  <option value=\"6,DAI\">DAI</option>\n                  {/* <option value=\"4,DAPP\">DAPP</option> */}\n                </Field>\n              </div>\n              <div>\n                <ErrorMessage name=\"token\" className=\"error\" />\n              </div>\n              <div className=\"notefee\">\n                Note: Current withdraw fee is {usdcfee} and {daifee} set\n              </div>\n              <div>\n                <button\n                  type=\"submit\"\n                  className=\"registerbtn\"\n                  disabled={loading}\n                >\n                  {loading ? \"Sending Token\" : \"Send Token\"}\n                </button>\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n      {errorMsg ? (\n        <div className=\"error\">{errorMsg}</div>\n      ) : (\n        <div className=\"success\">{successMsg}</div>\n      )}\n    </div>\n  );\n};\n\nexport default EosTransaction;\n","/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/index.js",[],["56","57"],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/user.reducer.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/config.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js",["58","59"],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/index.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/walletProvider.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/actions/actions.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/logic/reducers/eth.reducer.js",[],{"ruleId":"60","severity":1,"message":"61","line":14,"column":23,"nodeType":"62","messageId":"63","endLine":14,"endColumn":34},{"ruleId":"60","severity":1,"message":"64","line":40,"column":9,"nodeType":"62","messageId":"63","endLine":40,"endColumn":24},{"ruleId":"60","severity":1,"message":"65","line":42,"column":9,"nodeType":"62","messageId":"63","endLine":42,"endColumn":27},{"ruleId":"60","severity":1,"message":"66","line":34,"column":10,"nodeType":"62","messageId":"63","endLine":34,"endColumn":21},{"ruleId":"67","severity":1,"message":"68","line":51,"column":31,"nodeType":"69","messageId":"70","endLine":51,"endColumn":33},{"ruleId":"60","severity":1,"message":"71","line":67,"column":15,"nodeType":"62","messageId":"63","endLine":67,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":94,"column":50,"nodeType":"74","messageId":"75","endLine":94,"endColumn":52},{"ruleId":"76","severity":1,"message":"77","line":148,"column":6,"nodeType":"78","endLine":148,"endColumn":16,"suggestions":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"60","severity":1,"message":"84","line":102,"column":13,"nodeType":"62","messageId":"63","endLine":102,"endColumn":22},{"ruleId":"60","severity":1,"message":"84","line":173,"column":13,"nodeType":"62","messageId":"63","endLine":173,"endColumn":22},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'walletConnected' is assigned a value but never used.","'ethwalletConnected' is assigned a value but never used.","'tokenSymbol' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'toAcc' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'username' and 'walletConnected'. Either include them or remove the dependency array.","ArrayExpression",["85"],"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"'eosAmount' is assigned a value but never used.",{"desc":"88","fix":"89"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [loggedIn, username, walletConnected]",{"range":"90","text":"91"},[4233,4243],"[loggedIn, username, walletConnected]"]