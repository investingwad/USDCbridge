[{"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js":"1","/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js":"2","/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js":"3","/home/atul/Desktop/clone-folder/USDCbridge/src/modal.js":"4","/home/atul/Desktop/clone-folder/USDCbridge/src/App.js":"5","/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js":"6"},{"size":9513,"mtime":1613468794718,"results":"7","hashOfConfig":"8"},{"size":7075,"mtime":1611038862653,"results":"9","hashOfConfig":"10"},{"size":19377,"mtime":1610621416607,"results":"11","hashOfConfig":"10"},{"size":289,"mtime":1613453981936,"results":"12","hashOfConfig":"8"},{"size":1272,"mtime":1609310289035,"results":"13","hashOfConfig":"8"},{"size":10835,"mtime":1613453981932,"results":"14","hashOfConfig":"8"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"19o9ehe",{"filePath":"18","messages":"19","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1t482sy",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/atul/Desktop/clone-folder/USDCbridge/src/ethComponent.js",["28","29","30"],"import * as Web3 from \"web3\";\nimport { Field, Form, Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  usdcAddress,\n  bridgeAbi,\n  bridgeAddress,\n  daiAddress,\n  tokenAbi,\n  dappBrigeAbi,\n  dappBrigeAddress,\n} from \"./abi\";\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nconst schema = Yup.object().shape({\n  value: Yup.number()\n    .required(\"Enter value of token\")\n    .test(\n      \"lowAmount\",\n      `Should be greater than 0`,\n      (val) => parseFloat(val) > 0\n    ),\n  token: Yup.string().required(\"Select a token type\"),\n});\n\nconst initialValues = {\n  value: \"\",\n  token: \"USDC\",\n};\n\nconst usdcContract = new web3.eth.Contract(tokenAbi, usdcAddress);\nconst daiContract = new web3.eth.Contract(tokenAbi, daiAddress);\nconst brigeContract = new web3.eth.Contract(bridgeAbi, bridgeAddress);\nconst dappContract = new web3.eth.Contract(dappBrigeAbi, dappBrigeAddress);\n\nconst Ethereum = () => {\n  const walletConnected = useSelector((state) => state.user.walletConnected);\n  const address = useSelector((state) => state.address.address);\n  const ethwalletConnected = useSelector(\n    (state) => state.address.ethWalletConnected\n  );\n  const [loading, setLoading] = useState(\"\");\n  const [checked, setChecked] = useState(false);\n  const [errorMsg, seterrorMsg] = useState(\"\");\n  const [successMsg, setsuccessMsg] = useState(\"\");\n  const [approvedMsg, setapprovedMsg] = useState(\"\");\n\n  const sendToken = async (stakeAMount, tokenId) => {\n    console.log(\"inside send token\");\n\n    brigeContract.methods\n      .sendToken(stakeAMount, tokenId)\n      .send({\n        from: address,\n      })\n      .on(\"transactionHash\", (hash) => {\n        console.log(\"transactionHash  sendToken\", hash);\n      })\n      .on(\"receipt\", (receipt) => {\n        console.log(\"receipt sendToken\", receipt);\n        setsuccessMsg(receipt.transactionHash);\n        setLoading(false);\n      })\n      .on(\"confirmation\", (confirmationNumber, receipt) => {\n        console.log(\"confirmationNumber sendToken\", confirmationNumber);\n        console.log(\"receipt sendToken\", receipt);\n      })\n      .on(\"error\", (error) => {\n        console.log(\"error sendToken\", error);\n        seterrorMsg(error.message);\n        setLoading(false);\n      });\n  };\n\n  const approveAndSendToken = async (stakeAMount, tokenId, token) => {\n    console.log(\"inside approve and send token\");\n\n    setLoading(true);\n\n    const contract = token === \"USDC\" ? usdcContract : daiContract;\n\n    let approvedAmount = \"\";\n\n    if (checked) {\n      approvedAmount =\n        token === \"USDC\"\n          ? web3.utils.toWei(\"10000000000000000\", \"mwei\")\n          : web3.utils.toWei(\"10000000000000000\", \"ether\");\n    } else {\n      approvedAmount = stakeAMount;\n    }\n\n    console.log(\"approved amount \", approvedAmount);\n\n    contract.methods\n      .approve(bridgeAddress, approvedAmount)\n      .send({\n        from: address,\n      })\n      .on(\"transactionHash\", (hash) => {\n        console.log(\"transactionHash approve \", hash);\n      })\n      .on(\"receipt\", (receipt) => {\n        console.log(\"receipt approve\", receipt);\n        setapprovedMsg(receipt.transactionHash);\n      })\n      .on(\"confirmation\", (confirmationNumber, receipt) => {\n        console.log(\"confirmationNumber approve\", confirmationNumber);\n        console.log(\"receipt approve\", receipt);\n      })\n      .on(\"error\", (error) => {\n        console.log(\"error approve\", error.message);\n        setLoading(false);\n        seterrorMsg(error.message);\n      })\n      .then(() => {\n        brigeContract.methods\n          .sendToken(stakeAMount, tokenId)\n          .send({\n            from: address,\n          })\n          .on(\"transactionHash\", (hash) => {\n            console.log(\"transactionHash  sendToken\", hash);\n          })\n          .on(\"receipt\", (receipt) => {\n            console.log(\"receipt sendToken\", receipt);\n            setsuccessMsg(receipt.transactionHash);\n            setLoading(false);\n          })\n          .on(\"confirmation\", (confirmationNumber, receipt) => {\n            console.log(\"confirmationNumber sendToken\", confirmationNumber);\n            console.log(\"receipt sendToken\", receipt);\n          })\n          .on(\"error\", (error) => {\n            console.log(\"error sendToken\", error);\n            seterrorMsg(error.message);\n            setLoading(false);\n          });\n      });\n  };\n\n  const handleSubmit = async (values) => {\n    console.log(\"values \", values);\n\n    if (!address) {\n      alert(\"Please connect to metamask first\");\n      return;\n    }\n\n    const { value, token } = values;\n\n    console.log(\"value \", value);\n\n    if (token === \"DAPP\") {\n      const dappAmount = (parseFloat(value) * 1e4).toString();\n      setLoading(true);\n\n      dappContract.methods\n        .sendToken(dappAmount)\n        .send({\n          from: address,\n        })\n        .on(\"transactionHash\", (hash) => {\n          console.log(\"transactionHash  sendToken\", hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(\"receipt sendToken\", receipt);\n          setsuccessMsg(receipt.transactionHash);\n          setLoading(false);\n        })\n        .on(\"confirmation\", (confirmationNumber, receipt) => {\n          console.log(\"confirmationNumber sendToken\", confirmationNumber);\n          console.log(\"receipt sendToken\", receipt);\n        })\n        .on(\"error\", (error) => {\n          console.log(\"error sendToken\", error);\n          seterrorMsg(error.message);\n          setLoading(false);\n        });\n    } else {\n      const tokenId = token === \"USDC\" ? 0 : 1;\n\n      const contract = token === \"USDC\" ? usdcContract : daiContract;\n\n      const stakeAMount =\n        token === \"USDC\"\n          ? web3.utils.toWei(value, \"mwei\")\n          : web3.utils.toWei(value, \"ether\");\n\n      console.log(\"stakeAMount \", stakeAMount);\n\n      const approvedAmount = await contract.methods\n        .allowance(address, bridgeAddress)\n        .call();\n\n      console.log(\"approvedAmount in contract \", approvedAmount);\n\n      if (approvedAmount > stakeAMount) {\n        sendToken(stakeAMount, tokenId);\n      } else {\n        approveAndSendToken(stakeAMount, tokenId, token);\n      }\n    }\n  };\n\n  const closeTab = () => {\n    if (errorMsg) {\n      seterrorMsg(\"\");\n    }\n    if (successMsg) {\n      setsuccessMsg(\"\");\n    }\n    if (approvedMsg) {\n      setapprovedMsg(\"\");\n    }\n  };\n  console.log(\"checked \", checked);\n\n  return (\n    <div className=\"form-container\">\n      <div>3. Send Tokens Ethereum to EOS</div>\n      <div className=\"login\">\n        {/* <button onClick={connectToMetamask}>\n          {!!address ? \"Connected\" : \"Connect to metamask\"}\n        </button> */}\n\n        <div className=\"tokenform\">\n          <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleSubmit}\n          >\n            <Form>\n              <div>\n                <Field name=\"value\" placeholder=\"enter amount\" />\n              </div>\n              <div>\n                <ErrorMessage name=\"value\" />\n              </div>\n              <div>\n                <Field as=\"select\" name=\"token\">\n                  <option value=\"USDC\">USDC</option>\n                  <option value=\"DAI\">DAI</option>\n                  <option value=\"DAPP\">DAPP</option>\n                </Field>\n              </div>\n              <div>\n                <ErrorMessage name=\"token\" />\n              </div>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={checked}\n                  onChange={() => setChecked(!checked)}\n                  disabled={loading}\n                />\n                <span>Infinite Approval</span>\n              </label>\n              <div>\n                <button type=\"submit\" className=\"submit-btn\" disabled={loading}>\n                  {loading ? \"Sending Token\" : \"Send Token\"}\n                </button>\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n\n      <a\n        href=\"https://docs.google.com/document/u/1/d/14K6_DT-pqmBsAd3tLoHD-SKhPO1WCFW7unMKTMzxKx4/edit?usp=sharing\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Click here for help\n      </a>\n\n      {errorMsg ? (\n        <div className=\"errorMsg\">\n          <div className=\"close\" onClick={closeTab}>\n            x\n          </div>\n          <div className=\"errmsg\">Error</div>\n          <p className=\"error\">{errorMsg}</p>\n        </div>\n      ) : successMsg ? (\n        <div className=\"successMsg\">\n          <div className=\"close\" onClick={closeTab}>\n            x\n          </div>\n          <div className=\"msg\">Success</div>\n          {approvedMsg ? (\n            <>\n              <p className=\"para\">\n                Check approved trx :\n                <a href={`https://etherscan.io/tx/${approvedMsg}`} className=\"link\">\n                  {approvedMsg}\n                </a>\n              </p>\n\n              <p className=\"para\">\n                Check deposit trx :\n                <a href={successMsg} className=\"link\">\n                  {successMsg}\n                </a>\n              </p>\n            </>\n          ) : (\n            <>\n              <div>Check transaction :</div>\n              <a href={`https://etherscan.io/tx/${successMsg}`} className=\"link\">\n                {successMsg}\n              </a>\n            </>\n          )}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Ethereum;\n","/home/atul/Desktop/clone-folder/USDCbridge/src/eostransaction.js",["31","32","33","34","35","36","37"],"/home/atul/Desktop/clone-folder/USDCbridge/src/abi.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/modal.js",[],"/home/atul/Desktop/clone-folder/USDCbridge/src/App.js",["38"],"/home/atul/Desktop/clone-folder/USDCbridge/src/eosComponent.js",["39"],{"ruleId":"40","severity":1,"message":"41","line":14,"column":23,"nodeType":"42","messageId":"43","endLine":14,"endColumn":34},{"ruleId":"40","severity":1,"message":"44","line":40,"column":9,"nodeType":"42","messageId":"43","endLine":40,"endColumn":24},{"ruleId":"40","severity":1,"message":"45","line":42,"column":9,"nodeType":"42","messageId":"43","endLine":42,"endColumn":27},{"ruleId":"40","severity":1,"message":"46","line":33,"column":10,"nodeType":"42","messageId":"43","endLine":33,"endColumn":21},{"ruleId":"47","severity":1,"message":"48","line":48,"column":31,"nodeType":"49","messageId":"50","endLine":48,"endColumn":33},{"ruleId":"40","severity":1,"message":"51","line":64,"column":15,"nodeType":"42","messageId":"43","endLine":64,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":65,"column":22,"nodeType":"54","messageId":"55","endLine":65,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":91,"column":50,"nodeType":"54","messageId":"55","endLine":91,"endColumn":52},{"ruleId":"56","severity":1,"message":"57","line":119,"column":6,"nodeType":"58","endLine":119,"endColumn":16,"suggestions":"59"},{"ruleId":"52","severity":1,"message":"53","line":135,"column":19,"nodeType":"54","messageId":"55","endLine":135,"endColumn":21},{"ruleId":"56","severity":1,"message":"60","line":44,"column":6,"nodeType":"58","endLine":44,"endColumn":8,"suggestions":"61"},{"ruleId":"40","severity":1,"message":"62","line":1,"column":20,"nodeType":"42","messageId":"43","endLine":1,"endColumn":29},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'walletConnected' is assigned a value but never used.","'ethwalletConnected' is assigned a value but never used.","'tokenSymbol' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'toAcc' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'username' and 'walletConnected'. Either include them or remove the dependency array.","ArrayExpression",["63"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["64"],"'useEffect' is defined but never used.",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [loggedIn, username, walletConnected]",{"range":"69","text":"70"},"Update the dependencies array to be: [dispatch]",{"range":"71","text":"72"},[3381,3391],"[loggedIn, username, walletConnected]",[1102,1104],"[dispatch]"]